This article assumes that you have already installed Release and Debug builds of OpenCV at `/Users/neeravbm/Documents/libs/OpenCV/builds/osx-shared-release-clang` and `/Users/neeravbm/Documents/libs/OpenCV/builds/osx-shared-debug-clang` respectively.

## Install Eigen

1. Download Eigen at `/Users/neeravbm/Documents/libs/Eigen/src` from [Eigen website](http://bitbucket.org/eigen/eigen/get/3.3.0.tar.gz).

### Debug build
2. Create `builds/osx-debug-clang` directory and change into it.

```bash
cd /Users/neeravbm/Documents/libs/Eigen
mkdir -p builds/osx-debug-clang
cd builds/osx-debug-clang
```

3. Build using `cmake`, `make` and `make install`.

```bash
cmake -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_PREFIX=dist -DCMAKE_BUILD_TYPE=Debug ../../src
make
make install
```

This will create `dist` directory with Eigen library.

### Release build

4. Create `builds/osx-release-clang` directory and change into it.

```bash
cd /Users/neeravbm/Documents/libs/Eigen
mkdir -p builds/osx-release-clang
cd builds/osx-release-clang
```

5. Build using `cmake`, `make` and `make install`.

```bash
cmake -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_PREFIX=dist -DCMAKE_BUILD_TYPE=Release ../../src
make
make install
```

This will create `dist` directory with Eigen library.

## Install SNAP

6. Clone SNAP [github repo](https://github.com/snap-stanford/snap) into `/mnt/Applications/libs/SNAP/src`.

```bash
mkdir -p /mnt/Applications/libs/SNAP
cd /mnt/Applications/libs/SNAP
git clone https://github.com/snap-stanford/snap.git src
```

7. Unfortunately SNAP repo doesn't use `cmake` and executing `make` creates in-source executables. Instead we'll add a third-party `CMakeLists.txt` file from [ObiWahn's github repo](https://github.com/ObiWahn/snap/blob/f53f598b3f677da93263e25d364218a7d1c34483/cmake/CMakeLists.txt).

```bash
cd src
mkdir cmake
cd cmake
vim CMakeLists.txt
Copy the CMakeLists.txt content here and save CMakeLists.txt
```

## Install Qthreads

6. Qthreads is needed for MTGL. Clone it from its [github repository](https://github.com/Qthreads/qthreads) into `/mnt/Applications/libs/Qthreads/src`.

```bash
mkdir /mnt/Applications/libs/Qthreads
cd /mnt/Applications/libs/Qthreads
git clone https://github.com/Qthreads/qthreads.git src
```

### Release build

7. Generate `configure` using `automake`.

On Ubuntu:

```bash
cd /mnt/Applications/libs/Qthreads/src
sudo apt-get install autotools-dev automake build-essential libtool
./automake
```

8. Create `/mnt/Applications/libs/Qthreads/builds/ubuntu-release-gcc` and change into it.

```bash
mkdir -p /mnt/Applications/libs/Qthreads/builds/ubuntu-release-gcc
cd /mnt/Applications/libs/Qthreads/builds/ubuntu-release-gcc
```

9. Configue and compile.

```bash
CC=/usr/bin/gcc ../../src/configure --prefix=/mnt/Applications/libs/Qthreads/builds/ubuntu-release-gcc/dist
make -j8
make install
```

Above command will install `Qthreads` library into `/mnt/Applications/libs/Qthreads/builds/ubuntu-release-gcc/dist`.


## Install MTGL

10. MTGL is a high-performance multi-threaded graph library. We need to use it for Connected Components algorithm that's required in Euclidean cluster extraction. Download the source code from [its website](https://software.sandia.gov/trac/mtgl/downloader/download/file/1/mtgl-1.1.1.tar.gz). You'll most likely need to fill up a form. Copy the code to `/mnt/Applications/libs/MTGL/src` folder.

```bash
mkdir /mnt/Applications/libs/MTGL
cd /mnt/Applications/libs/MTGL
Copy mtgl-1.1.1.tar.gz here
tar -zxvf mtgl-1.1.1.tar.gz
rm mtgl-1.1.1.tar.gz
```

### Release build

On Ubuntu:

11. Create directory `/mnt/Applications/libs/Qthreads/builds/ubuntu-release-gcc` and change into it.

```bash
mkdir -p /mnt/Applications/libs/Qthreads/builds/ubuntu-gcc
cd /mnt/Applications/libs/Qthreads/builds/ubuntu-gcc
```

12. Configure and compile.

```bash
#CC=/usr/bin/gcc ../../mtgl-1.1.1/configure --prefix=/mnt/Applications/libs/mtgl/builds/ubuntu-gcc/dist --with-qthreads=/mnt/Applications/libs/Qthreads/builds/ubuntu-release-gcc/dist
CC=/usr/bin/gcc CXX=/usr/bin/g++ ../../mtgl-1.1.1/configure --prefix=/mnt/Applications/libs/mtgl/builds/ubuntu-gcc/dist --with-openmp
make -j8
make install
```

Above will install MTGL library in `/mnt/Applications/libs/mtgl/builds/ubuntu-gcc/dist`.


## Install CGAL

1. Clone `CGAL` from [github](https://github.com/CGAL/cgal) into `/mnt/Applications/libs/CGAL/src`.

```bash
mkdir /mnt/Applications/libs/CGAL
cd /mnt/Applications/libs/CGAL
git clone https://github.com/CGAL/cgal.git src
```


## Install PoissonRecon

1. Clone `PoissonRecon` from [github](https://github.com/mkazhdan/PoissonRecon) to `/mnt/Applications/libs/PoissonRecon/src`.

```bash
mkdir /mnt/Applications/libs/PoissonRecon
cd /mnt/Applications/libs/PoissonRecon
git clone https://github.com/mkazhdan/PoissonRecon.git src
```

2. Change into `/mnt/Applications/libs/PoissonRecon/src` and add `CMakeLists.txt` at `/mnt/Applications/libs/PoissonRecon/src/CMakeLists.txt`. File should have the following content.

```bash
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.4)

PROJECT(poisson_recon)

ADD_SUBDIRECTORY(Src)
```

3. Change into `/mnt/Applications/libs/PoissonRecon/src/Src` and add `CMakeLists.txt` at `/mnt/Applications/libs/PoissonRecon/src/Src/CMakeLists.txt`. File should have the following content.

```bash
FIND_PACKAGE(OpenMP)
IF (OpenMP_FOUND)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fopenmp")
ENDIF (OpenMP_FOUND)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wno-write-strings")

FILE(GLOB_RECURSE INCLUDES
        "${PROJECT_SOURCE_DIR}/Src/*.h"
        "${PROJECT_SOURCE_DIR}/Src/*.cpp"
        "${PROJECT_SOURCE_DIR}/Src/*.inl")
list(REMOVE_ITEM INCLUDES ${PROJECT_SOURCE_DIR}/Src/PoissonRecon.cpp)
list(REMOVE_ITEM INCLUDES ${PROJECT_SOURCE_DIR}/Src/SurfaceTrimmer.cpp)

ADD_LIBRARY(poisson_recon ${INCLUDES})
```


## Install D3D

6. `D3D` folder should have `src` and `builds` directory.

### Debug build

7. Set the environment variable `EIGEN3_ROOT_DIR` pointing to the location of Eigen library's `include` folder.

```bash
export EIGEN3_ROOT_DIR=/Users/neeravbm/Documents/libs/Eigen/builds/osx-debug-clang/dist/include
```

8. Create a directory `osx-shared-debug-clang` in `D3D/builds` folder and change into it.

```bash
mkdir -p /Users/neeravbm/Documents/libs/D3D/builds/osx-shared-debug-clang
cd /Users/neeravbm/Documents/libs/D3D/builds/osx-shared-debug-clang
```

9. Build using `cmake`, `make` and `make install`. The assumption is that OpenCV is installed at `/Users/neeravbm/Documents/libs/OpenCV/builds/osx-shared-debug-clang`, otherwise change `OpenCV_DIR` variable value accordingly.

Mac OSX:

```bash
cmake -DEIGEN_INCLUDE_DIR_HINTS=/Users/neeravbm/Documents/libs/Eigen/builds/osx-debug-clang/dist/include/eigen3 -DNANOGUI_DIR=/Users/neeravbm/Documents/libs/nanogui/builds/osx-shared-debug-clang/dist -DNANOVG_DIR=/Users/neeravbm/Documents/libs/nanovg -DGLM_LIBRARY_DIR=/Users/neeravbm/Documents/libs/glm -DBOOST_LIBRARYDIR=/Users/neeravbm/Documents/libs/boost/builds/osx-debug-clang-1.61/stage/lib -DPCL_DIR=/Users/neeravbm/Documents/libs/pcl/builds/osx-shared-debug-clang -DOpenCV_DIR=/Users/neeravbm/Documents/libs/OpenCV/builds/osx-shared-debug-clang -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_PREFIX=dist -DD3D_DOC_INSTALL_PATH=dist/share -DD3D_SAMPLES_INSTALL_PATH=dist/samples -DCMAKE_BUILD_TYPE=Debug ../../src/
make
make install
```

Ubuntu:

```bash
cmake -DEIGEN_INCLUDE_DIR_HINTS=/mnt/Applications/libs/Eigen/builds/ubuntu-debug-gcc/dist/include/eigen3 -DNANOGUI_DIR=/mnt/Applications/libs/nanogui/builds/ubuntu-shared-debug-gcc/dist -DNANOVG_DIR=/mnt/Applications/libs/nanovg -DGLM_LIBRARY_DIR=/mnt/Applications/libs/glm -DBOOST_LIBRARYDIR=/mnt/Applications/libs/boost/builds/ubuntu-debug-gcc-1.61/stage/lib -DPCL_DIR=/mnt/Applications/libs/pcl/builds/ubuntu-shared-debug-gcc -DOpenCV_DIR=/mnt/Applications/libs/OpenCV/builds/ubuntu-shared-debug-gcc -DMTGL_DIR=/mnt/Applications/libs/mtgl/builds/ubuntu-gcc/dist -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_INSTALL_PREFIX=dist -DD3D_DOC_INSTALL_PATH=dist/share -DD3D_SAMPLES_INSTALL_PATH=dist/samples -DCMAKE_BUILD_TYPE=Debug -DD3D_BUILD_GLRENDERER:BOOL=OFF -DD3D_BUILD_CALIB:BOOL=OFF ../../src/
make -j8
make install
```

10. To execute the sample on Mac, set `DYLD_FALLBACK_LIBRARY_PATH` on Mac.

```bash
export DYLD_FALLBACK_LIBRARY_PATH="export DYLD_FALLBACK_LIBRARY_PATH=/Users/neeravbm/Documents/libs/D3D/builds/osx-shared-debug-clang/dist/lib:/Users/neeravbm/Documents/libs/OpenCV/builds/osx-shared-debug-clang/dist/lib:/Users/neeravbm/Documents/libs/pcl/builds/osx-shared-debug-clang/dist/lib:/Users/neeravbm/Documents/libs/boost/builds/osx-debug-clang-1.61/stage/lib:/Users/neeravbm/Documents/libs/qt/builds/osx-static-debug-release-clang/lib:/Users/neeravbm/Documents/libs/flann/builds/osx-shared-debug-clang/dist/lib"
```

### Release build

10. Create a directory `ubuntu-shared-release-gcc` in `D3D/builds` folder and change into it.

```bash
mkdir -p /mnt/Applications/libs/D3D/builds/ubuntu-shared-release-gcc
cd /mnt/Applications/libs/D3D/builds/ubuntu-shared-release-gcc
```

11. Build using `cmake`, `make` and `make install`.

Ubuntu:

```bash
cmake -DEIGEN_INCLUDE_DIR_HINTS=/mnt/Applications/libs/Eigen/builds/ubuntu-release-gcc/dist/include/eigen3 -DNANOGUI_DIR=/mnt/Applications/libs/nanogui/builds/ubuntu-shared-release-gcc/dist -DNANOVG_DIR=/mnt/Applications/libs/nanovg -DGLM_LIBRARY_DIR=/mnt/Applications/libs/glm -DBOOST_LIBRARYDIR=/mnt/Applications/libs/boost/builds/ubuntu-release-gcc-1.61/stage/lib -DPCL_DIR=/mnt/Applications/libs/pcl/builds/ubuntu-shared-release-gcc -DOpenCV_DIR=/mnt/Applications/libs/OpenCV/builds/ubuntu-shared-release-gcc -DMTGL_DIR=/mnt/Applications/libs/mtgl/builds/ubuntu-gcc/dist -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_INSTALL_PREFIX=dist -DD3D_DOC_INSTALL_PATH=dist/share -DD3D_SAMPLES_INSTALL_PATH=dist/samples -DCMAKE_BUILD_TYPE=Release -DD3D_BUILD_GLRENDERER:BOOL=OFF -DD3D_BUILD_CALIB:BOOL=OFF ../../src/
make -j8
make install
```

Above will create `dist` directory which has the compiled library.

10. For creating static library, use the `cmake` option `-DD3D_BUILD_SHARED:OFF`.

### Android Release build

10. Create a directory `android-shared-release` in `D3D/builds` folder and change into it.

```bash
mkdir -p /Users/neeravbm/Documents/libs/D3D/builds/android-shared-release
cd /Users/neeravbm/Documents/libs/D3D/builds/android-shared-release
```

11. Build using `cmake`, `make` and `make install`.

```bash
cmake -DCMAKE_TOOLCHAIN_FILE=/Users/neeravbm/Documents/libs/D3D/src/cmake/android-cmake/android.toolchain.cmake -DOpenCV_DIR=/Users/neeravbm/Documents/libs/OpenCV/builds/android-static-release/dist/sdk/native/jni -DANDROID_NATIVE_API_LEVEL=15  -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=dist -DANDROID_NDK=/Users/neeravbm/Library/Android/sdk/ndk-bundle ../../src/
make
make install
```

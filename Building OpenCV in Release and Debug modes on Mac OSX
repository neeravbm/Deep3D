Clone OpenCV [git repo](https://github.com/opencv/opencv) in `/Users/neeravbm/Documents/lib`.

```bash
git clone https://github.com/opencv/opencv.git
```

## Creating a Release build

Creating a Release build for Mac is very easy. Just execute:

```bash
/usr/bin/python2.7 platforms/osx/build_framework.py dist/osx-release-clang --without=opencv_world
```

Make sure to use python2.7 and build without opencv_world module. Building with python3 gives an error. Similarly, building with `opencv_world` module also gives an error. In the above command, `dist/osx-debug-clang` is the build directory. In the directory name, I have added `clang` since that's the compiler that's being used. Any program that uses OpenCV will also need to be compiled using `clang`. Compiling with other compilers and then running the program may give a linking error. As an example, compiling a program that has `imwrite()` function with `c++` compiler gives an error if OpenCV is compiled using `clang`.

The above command will create `dist/osx-release-clang` directory with `'opencv2.framework` and `build` directories inside it. The `include` and `lib` paths that the programs need to use are located in `x86_64-MacOSX/install` directory with the `build` directory.

## Creating a Debug build

### Option 1

Creating a Debug build for Mac is a lot more complicated, primarily since the OpenCV distribution is broken when building with Debug mode. Open `platforms/osx/build_framework.py` and replace the word "Release" with "Debug" everywhere. Open `platforms/ios/build_framework.py` and replace the word "Release" with "Debug" everywhere. In addition, find the function `buildOne()` and replace the line `execute(["cmake", "-P", "cmake_install.cmake"], cwd = builddir)` by `execute(["cmake", "-DBUILD_TYPE=Debug", "-P", "cmake_install.cmake"], cwd = builddir)`. Without this change, 3rd party libraries will be searched in `Release` directory even though they have been build under `Debug` directory. Now execute:

```bash
/usr/bin/python2.7 platforms/osx/build_framework.py dist/osx-debug-clang --without=opencv_world
```

The above command will create `dist/osx-debug-clang` diretory with `opencv2.framework` and `build` directories inside it. The `include` and `lib` paths that the programs need to use are located in `x86_64-MacOSX/install` directory with the `build` directory.

### Option 2

Debug build with shared libraries can also be created using Cmake directly. In fact, this method is needed if you want to use Cling. Cling doesn't recognize static libraries with `.a` extension. We need to create dynamic libraries with `.dylib` extension, which this method created.

Clone OpenCV [git repo](https://github.com/opencv/opencv) in `/Users/neeravbm/Documents/lib/OpenCV` and rename the directory to `src`. Create a directory `builds/osx-shared-debug-clang` in `/Users/neeravbm/Documents/lib/OpenCV`.

Building OpenCV with VTK has an error that it doesn't ask for VTK's `vtkIOGeometry` module. Hence it gives the following error:

```bash
/Users/neeravbm/Documents/libs/OpenCV/src/modules/viz/src/precomp.hpp:119:10: fatal error: 'vtkSTLWriter.h' file not found
```

To fix the above error, open `cmake/OpenCVDetectVTK.cmake` and add `vtkIOGeometry` inside the `find_package(VTK ...)` command for VTK 7. Here's how that line should look:

```bash
IF(VTK_FOUND)
  IF(VTK_RENDERING_BACKEND) #in vtk 7, the rendering backend is exported as a var.
      find_package(VTK QUIET COMPONENTS vtkRendering${VTK_RENDERING_BACKEND} vtkInteractionStyle vtkRenderingLOD vtkIOPLY vtkFiltersTexture vtkRenderingFreeType vtkIOExport vtkIOGeometry NO_MODULE)
```

If building with Eigen, there is an error in the file `cmake/OpenCVFindLibsPerf.cmake`. Remove `/include` after `$ENV{EIGEN_ROOT}`. The command should be:

```bash
  find_path(EIGEN_INCLUDE_PATH "Eigen/Core"
            PATHS /usr/local /opt /usr $ENV{EIGEN_ROOT} ENV ProgramFiles ENV ProgramW6432
            PATH_SUFFIXES include/eigen3 include/eigen2 Eigen/include/eigen3 Eigen/include/eigen2
            DOC "The path to Eigen3/Eigen2 headers"
            CMAKE_FIND_ROOT_PATH_BOTH)
```

Create the environment variable `EIGEN_ROOT`:

```bash
export EIGEN_ROOT=/mnt/Applications/libs/Eigen/builds/ubuntu-debug-gcc/dist
```

If compiling Eigen with Qt support, we need to modify the file `cmake/OpenCVFindLibsGUI.cmake`. To find Qt5 packages, it uses old convention such as `find_package(Qt5Core)`. The problem with this approach is that we need to specify a command line argument such as `-DQt5Core_DIR=<Path to QT>` for each component used. Instead use the convention `find_package(Qt5 COMPONENTS Core Widgets)`. The block to find QT in `cmake/OpenCVFindLibsGUI.cmake` should look like the following:

```bash
# --- QT4 ---
ocv_clear_vars(HAVE_QT HAVE_QT5)
if(WITH_QT)
  if(NOT WITH_QT EQUAL 4)
    find_package(Qt5 COMPONENTS Core Gui Widgets Test Concurrent)
#    find_package(Qt5Core)
#    find_package(Qt5Gui)
#    find_package(Qt5Widgets)
#    find_package(Qt5Test)
#    find_package(Qt5Concurrent)
    if(Qt5Core_FOUND AND Qt5Gui_FOUND AND Qt5Widgets_FOUND AND Qt5Test_FOUND AND Qt5Concurrent_FOUND)
      set(HAVE_QT5 ON)
      set(HAVE_QT  ON)
       find_package(Qt5 COMPONENTS OpenGL)
#      find_package(Qt5OpenGL)
      if(Qt5OpenGL_FOUND)
        set(QT_QTOPENGL_FOUND ON)
      endif()
    endif()
  endif()

  if(NOT HAVE_QT)
    find_package(Qt4 REQUIRED QtCore QtGui QtTest)
    if(QT4_FOUND)
      set(HAVE_QT TRUE)
    endif()
  endif()
endif()
```

Then execute the following commands:

Mac OSX (without Qt and OpenGL):

```bash
cmake -DVTK_DIR=/Users/neeravbm/Documents/libs/vtk/builds/osx-shared-debug-clang -DCMAKE_INSTALL_PREFIX=dist -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ ../../src
make
make install
```

Ubuntu (with Qt and OpenGL):

```bash
cmake -DVTK_DIR=/mnt/Applications/libs/vtk/builds/ubuntu-shared-debug-gcc -DCMAKE_INSTALL_PREFIX=dist -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DWITH_OPENGL:BOOL=ON -DWITH_QT:BOOL=ON -DQt5_DIR=/mnt/Applications/libs/qt/builds/ubuntu-debug-gcc/lib/cmake/Qt5 -DWITH_OPENMP:BOOL=ON ../../opencv-3.2.0
make -j8
make install
```

Above commands will install `include` and `lib` directories under `builds/osx-shared-debug-clang/dist`. For using OpenCV in a program using CMake, use `set(CMAKE_PREFIX_PATH ${CMAKE_MODULE_PATH} /Users/neeravbm/Documents/libs/OpenCV/builds/osx-shared-debug-clang)` in `CMakeLists.txt`.

## Creating a Release build using CMake with custom-compiled VTK

Create a directory `/Users/neeravbm/Documents/libs/OpenCV/builds/osx-shared-release-clang` and change into it.

```bash
mkdir -p /Users/neeravbm/Documents/libs/OpenCV/builds/osx-shared-release-clang
cd /Users/neeravbm/Documents/libs/OpenCV/builds/osx-shared-release-clang
```

Building OpenCV with VTK has an error that it doesn't ask for VTK's `vtkIOGeometry` module. Hence it gives the following error:

```bash
/Users/neeravbm/Documents/libs/OpenCV/src/modules/viz/src/precomp.hpp:119:10: fatal error: 'vtkSTLWriter.h' file not found
```

To fix the above error, open `cmake/OpenCVDetectVTK.cmake` and add `vtkIOGeometry` inside the `find_package(VTK ...)` command for VTK 7. Here's how that line should look:

```bash
IF(VTK_FOUND)
  IF(VTK_RENDERING_BACKEND) #in vtk 7, the rendering backend is exported as a var.
      find_package(VTK QUIET COMPONENTS vtkRendering${VTK_RENDERING_BACKEND} vtkInteractionStyle vtkRenderingLOD vtkIOPLY vtkFiltersTexture vtkRenderingFreeType vtkIOExport vtkIOGeometry NO_MODULE)
```

Now compile using `cmake`, `make` and `make install`.

```bash
cmake -DVTK_DIR=/Users/neeravbm/Documents/libs/vtk/builds/osx-shared-release-clang -DCMAKE_INSTALL_PREFIX=dist -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ ../../src
make
make install
```

## Creating an Android Release build

Create a directory `builds/android-static-release` in `/Users/neeravbm/Documents/libs/OpenCV`. Change into this directory, execute `cmake`, `make` and `make install`.

```bash
cmake -DCMAKE_TOOLCHAIN_FILE=../../src/platforms/android/android.toolchain.cmake -DANDROID_NDK=/Users/neeravbm/Library/Android/sdk/ndk-bundle -DCMAKE_INSTALL_PREFIX=dist -DCMAKE_BUILD_TYPE=Release ../../src
make
make install
```

Above will create `/Users/neeravbm/Documents/libs/OpenCV/builds/android-static-release/dist` folder which can be used by another Android NDK program.
